// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Utils = require("./Utils.bs.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function count_occurrences(str, delimiter) {
  return List.length(Utils.Utils[/* str_to_list */0](delimiter, str)) - 1 | 0;
}

function sum_repeated_characters_in_string(curr_str) {
  return List.fold_left((function (acc, curr_char) {
                var three = acc[/* three */1];
                var two = acc[/* two */0];
                var match = count_occurrences(curr_str, curr_char);
                if (match !== 2) {
                  if (match !== 3) {
                    return /* record */[
                            /* two */two,
                            /* three */three
                          ];
                  } else {
                    return /* record */[
                            /* two */two,
                            /* three */1
                          ];
                  }
                } else {
                  return /* record */[
                          /* two */1,
                          /* three */three
                        ];
                }
              }), /* record */[
              /* two */0,
              /* three */0
            ], Utils.Utils[/* str_to_list */0]("", curr_str));
}

function calculate_checksum(data) {
  var counts = List.fold_left((function (acc, curr) {
          return /* record */[
                  /* two */acc[/* two */0] + curr[/* two */0] | 0,
                  /* three */acc[/* three */1] + curr[/* three */1] | 0
                ];
        }), /* record */[
        /* two */0,
        /* three */0
      ], List.map(sum_repeated_characters_in_string, data));
  return Caml_int32.imul(counts[/* two */0], counts[/* three */1]);
}

function is_similar_string(source, target) {
  var sl = Utils.Utils[/* str_to_list */0]("", source);
  var tl = Utils.Utils[/* str_to_list */0]("", target);
  var l = List.map2((function (s, t) {
          return s === t;
        }), sl, tl);
  return List.length(List.filter((function (i) {
                      return !i;
                    }))(l)) <= 1;
}

function find_boxes_with_prototype_fabric() {
  return "abc";
}

function solve(input) {
  var data = Utils.Utils[/* str_to_list */0](undefined, input);
  var checksum = calculate_checksum(data);
  return Promise.resolve(/* tuple */[
              checksum,
              "abc"
            ]);
}

exports.count_occurrences = count_occurrences;
exports.sum_repeated_characters_in_string = sum_repeated_characters_in_string;
exports.calculate_checksum = calculate_checksum;
exports.is_similar_string = is_similar_string;
exports.find_boxes_with_prototype_fabric = find_boxes_with_prototype_fabric;
exports.solve = solve;
/* No side effect */
