// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function MakeSet(Item) {
  var add = function (currentSet, newItem) {
    if (List.exists((function (x) {
              return Curry._2(Item[/* equal */0], x, newItem);
            }), currentSet)) {
      return currentSet;
    } else {
      return /* :: */[
              newItem,
              currentSet
            ];
    }
  };
  return /* module */[
          /* empty : [] */0,
          /* add */add
        ];
}

function equal(a, b) {
  if (a[/* x */0] === b[/* x */0]) {
    return a[/* y */1] === b[/* y */1];
  } else {
    return false;
  }
}

function create(x, y) {
  return /* record */[
          /* x */x,
          /* y */y
        ];
}

var House = /* module */[
  /* equal */equal,
  /* create */create
];

function add(currentSet, newItem) {
  if (List.exists((function (x) {
            return equal(x, newItem);
          }), currentSet)) {
    return currentSet;
  } else {
    return /* :: */[
            newItem,
            currentSet
          ];
  }
}

var HouseSet = /* module */[
  /* empty : [] */0,
  /* add */add
];

function move_house(action, $$location) {
  var curr_y = $$location[/* y */1];
  var curr_x = $$location[/* x */0];
  switch (action) {
    case 0 : 
        return /* record */[
                /* x */curr_x,
                /* y */curr_y + 1 | 0
              ];
    case 1 : 
        return /* record */[
                /* x */curr_x + 1 | 0,
                /* y */curr_y
              ];
    case 2 : 
        return /* record */[
                /* x */curr_x,
                /* y */curr_y - 1 | 0
              ];
    case 3 : 
        return /* record */[
                /* x */curr_x - 1 | 0,
                /* y */curr_y
              ];
    case 4 : 
        return /* record */[
                /* x */curr_x,
                /* y */curr_y
              ];
    
  }
}

function match_instruction(instruction) {
  switch (instruction) {
    case "<" : 
        return /* WEST */3;
    case ">" : 
        return /* EAST */1;
    case "^" : 
        return /* NORTH */0;
    case "v" : 
        return /* SOUTH */2;
    default:
      return /* NOOP */4;
  }
}

function next_delivery(instruction, $$location) {
  var action = match_instruction(instruction);
  return move_house(action, $$location);
}

function deliver_presents(_deliveries_made, instructions, _index, _location) {
  while(true) {
    var $$location = _location;
    var index = _index;
    var deliveries_made = _deliveries_made;
    if (index < instructions.length) {
      var instruction = $$String.make(1, Caml_string.get(instructions, index));
      var next_location = next_delivery(instruction, $$location);
      var deliveries_made$1 = add(deliveries_made, next_location);
      _location = next_location;
      _index = index + 1 | 0;
      _deliveries_made = deliveries_made$1;
      continue ;
    } else {
      return deliveries_made;
    }
  };
}

function solve(data) {
  return Promise.resolve(List.length(deliver_presents(/* [] */0, data, 0, /* record */[
                      /* x */0,
                      /* y */0
                    ])));
}

var total_deliveries = 0;

exports.total_deliveries = total_deliveries;
exports.MakeSet = MakeSet;
exports.House = House;
exports.HouseSet = HouseSet;
exports.move_house = move_house;
exports.match_instruction = match_instruction;
exports.next_delivery = next_delivery;
exports.deliver_presents = deliver_presents;
exports.solve = solve;
/* No side effect */
