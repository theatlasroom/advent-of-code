// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Utils = require("./Utils.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function match_instruction(input) {
  var charlist = Utils.Utils[/* str_to_list */0]("", input);
  if (charlist) {
    var match = charlist[0] === "+";
    var action = match ? /* INC */0 : /* DEC */1;
    var amount = Caml_format.caml_int_of_string($$String.concat("", charlist[1]));
    return /* record */[
            /* action */action,
            /* amount */amount
          ];
  } else {
    return /* record */[
            /* action : NOOP */2,
            /* amount */0
          ];
  }
}

function calculate_next_value($staropt$star, ins) {
  var current_value = $staropt$star !== undefined ? $staropt$star : 0;
  var match = ins[/* action */0];
  switch (match) {
    case 0 : 
        return current_value + ins[/* amount */1] | 0;
    case 1 : 
        return current_value - ins[/* amount */1] | 0;
    case 2 : 
        return current_value;
    
  }
}

function calibrate(_data, _result) {
  while(true) {
    var result = _result;
    var data = _data;
    if (data) {
      var next = calculate_next_value(result, match_instruction(data[0]));
      _result = next;
      _data = data[1];
      continue ;
    } else {
      return result;
    }
  };
}

function first_repeated_frequency(_curr_freq, _curr_index, data, freq_table) {
  while(true) {
    var curr_index = _curr_index;
    var curr_freq = _curr_freq;
    try {
      return Hashtbl.find(freq_table, curr_freq);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        Hashtbl.add(freq_table, curr_freq, curr_freq);
        var next = calculate_next_value(curr_freq, match_instruction(List.nth(data, curr_index)));
        var match = curr_index < (List.length(data) - 1 | 0);
        var next_index = match ? curr_index + 1 | 0 : 0;
        _curr_index = next_index;
        _curr_freq = next;
        continue ;
      } else {
        throw exn;
      }
    }
  };
}

function solve(input) {
  var data = Utils.Utils[/* str_to_list */0]("\n", input);
  var resulting_frequency = calibrate(data, 0);
  var initial_size = (List.length(data) << 1);
  var repeated_frequency = first_repeated_frequency(0, 0, data, Hashtbl.create(undefined, initial_size));
  return Promise.resolve(/* tuple */[
              resulting_frequency,
              repeated_frequency
            ]);
}

exports.match_instruction = match_instruction;
exports.calculate_next_value = calculate_next_value;
exports.calibrate = calibrate;
exports.first_repeated_frequency = first_repeated_frequency;
exports.solve = solve;
/* No side effect */
